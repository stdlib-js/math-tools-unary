{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isOrder = require( '@stdlib/ndarray-base-assert-is-order' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar orders = require( '@stdlib/ndarray-orders' );\nvar join = require( '@stdlib/array-base-join' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Array} dtypes - list of supported output data types\n* @param {Object} options - options\n* @param {string} [options.dtype] - output array data type\n* @param {string} [options.order] - output array order\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var opts = {};\n* var options = {\n*     'order': 'row-major'\n* };\n* var err = validate( opts, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, dtypes, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t\tif ( !isOrder( opts.order ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'order', join( orders(), '\", \"' ), opts.order ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isObject = require( '@stdlib/assert-is-object' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isOutputDataTypePolicy = require( '@stdlib/ndarray-base-assert-is-output-data-type-policy' );\nvar isInputCastingPolicy = require( '@stdlib/ndarray-base-assert-is-input-casting-policy' );\nvar isDataType = require( '@stdlib/ndarray-base-assert-is-data-type' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar unaryOutputDataType = require( '@stdlib/ndarray-base-unary-output-dtype' );\nvar unaryInputCastingDataType = require( '@stdlib/ndarray-base-unary-input-casting-dtype' );\nvar baseAssign = require( '@stdlib/ndarray-base-assign' );\nvar baseEmpty = require( '@stdlib/ndarray-base-empty' );\nvar maybeBroadcastArray = require( '@stdlib/ndarray-maybe-broadcast-array' );\nvar getShape = require( '@stdlib/ndarray-shape' );\nvar getOrder = require( '@stdlib/ndarray-order' );\nvar getDType = require( '@stdlib/ndarray-dtype' );\nvar empty = require( '@stdlib/ndarray-empty' );\nvar everyBy = require( '@stdlib/array-base-every-by' );\nvar join = require( '@stdlib/array-base-join' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function which performs element-wise computation.\n*\n* @param {Function} fcn - function which applies a unary function to each element in an ndarray\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing lists of supported input data types for each ndarray argument\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - dispatch policies\n* @param {string} policies.output - output data type policy\n* @param {string} policies.casting - input ndarray casting policy\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be an object having supported policies\n* @returns {Function} function which performs element-wise computation\n*\n* @example\n* var base = require( '@stdlib/math-base-special-abs' );\n* var dispatch = require( '@stdlib/ndarray-dispatch' );\n* var unary = require( '@stdlib/ndarray-base-unary' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var types = [\n*     'float64', 'float64',\n*     'float32', 'float32',\n*     'generic', 'generic'\n* ];\n* var data = [\n*     base,\n*     base,\n*     base\n* ];\n* var dispatcher = dispatch( unary, types, data, 2, 1, 1 );\n*\n* var idt = [ 'float64', 'float32', 'generic' ];\n* var odt = idt;\n*\n* var policies = {\n*     'output': 'real_and_generic',\n*     'casting': 'none'\n* };\n* var abs = factory( dispatcher, [ idt ], odt, policies );\n*\n* var x = array( [ [ -1.0, -2.0 ], [ -3.0, -4.0 ] ] );\n* // returns <ndarray>\n*\n* var y = abs( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*/\nfunction factory( fcn, idtypes, odtypes, policies ) {\n\tvar POLICIES;\n\tvar dt;\n\tvar i;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tif ( !isCollection( idtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', idtypes ) );\n\t}\n\tfor ( i = 0; i < idtypes.length; i++ ) {\n\t\tdt = idtypes[ i ];\n\t\tif (\n\t\t\t!isCollection( dt ) ||\n\t\t\tdt.length < 1 ||\n\t\t\t!everyBy( dt, isDataType )\n\t\t) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must contain arrays of data types. Value: `%s`.', idtypes ) );\n\t\t}\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object. Value: `%s`.', policies ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\tif ( !isInputCastingPolicy( policies.casting ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported casting policy. Value: `%s`.', policies.casting ) );\n\t}\n\tPOLICIES = {\n\t\t'output': policies.output,\n\t\t'casting': policies.casting\n\t};\n\tsetReadOnly( unary, 'assign', assign );\n\treturn unary;\n\n\t/**\n\t* Performs element-wise computation.\n\t*\n\t* @private\n\t* @param {ndarray} x - input array\n\t* @param {Options} [options] - options\n\t* @param {string} [options.dtype] - output array data type\n\t* @param {string} [options.order] - output array order\n\t* @throws {TypeError} first argument must be an ndarray\n\t* @throws {TypeError} first argument must have a supported data type\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ndarray} output array\n\t*/\n\tfunction unary( x ) {\n\t\tvar opts;\n\t\tvar err;\n\t\tvar xsh;\n\t\tvar ord;\n\t\tvar xdt;\n\t\tvar ydt;\n\t\tvar tmp;\n\t\tvar dt;\n\t\tvar y;\n\n\t\tif ( !isndarrayLike( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\txdt = getDType( x );\n\t\tif ( !contains( idtypes[ 0 ], xdt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( idtypes[ 0 ], '\", \"' ), xdt ) );\n\t\t}\n\t\topts = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( opts, odtypes, arguments[ 1 ] );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\txsh = getShape( x );\n\t\tord = getOrder( x );\n\n\t\t// Initialize an output array:\n\t\tydt = opts.dtype || unaryOutputDataType( xdt, POLICIES.output );\n\t\ty = empty( xsh, {\n\t\t\t'dtype': ydt,\n\t\t\t'order': opts.order || ord\n\t\t});\n\n\t\t// Determine whether we need to cast the input ndarray...\n\t\tdt = unaryInputCastingDataType( xdt, ydt, POLICIES.casting );\n\t\tif ( xdt !== dt ) {\n\t\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\t\ttmp = baseEmpty( dt, xsh, ord );\n\t\t\tbaseAssign( [ x, tmp ] );\n\t\t\tx = tmp;\n\t\t}\n\t\tfcn( x, y );\n\t\treturn y;\n\t}\n\n\t/**\n\t* Performs element-wise computation and assigns results to a provided output ndarray.\n\t*\n\t* @private\n\t* @param {ndarray} x - input array\n\t* @param {ndarray} y - output array\n\t* @throws {TypeError} first argument must be an ndarray\n\t* @throws {TypeError} first argument must have a supported data type\n\t* @throws {TypeError} second argument must be an ndarray\n\t* @throws {Error} unable to broadcast the input array against the output array\n\t* @returns {ndarray} output array\n\t*/\n\tfunction assign( x, y ) {\n\t\tvar xdt;\n\t\tvar tmp;\n\t\tvar dt;\n\n\t\tif ( !isndarrayLike( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( !isndarrayLike( y ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray. Value: `%s`.', y ) );\n\t\t}\n\t\t// Validate the input ndarray data type in order to maintain similar behavior to above...\n\t\txdt = getDType( x );\n\t\tif ( !contains( idtypes[ 0 ], xdt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( idtypes[ 0 ], '\", \"' ), xdt ) );\n\t\t}\n\t\t// Determine whether we need to cast the input ndarray...\n\t\tdt = unaryInputCastingDataType( xdt, getDType( y ), POLICIES.casting );\n\t\tif ( xdt !== dt ) {\n\t\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\t\ttmp = baseEmpty( dt, getShape( x ), getOrder( x ) );\n\t\t\tbaseAssign( [ x, tmp ] );\n\t\t\tx = tmp;\n\t\t}\n\t\tfcn( maybeBroadcastArray( x, getShape( y ) ), y );\n\t\treturn y;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a function which performs element-wise computation by applying a unary function to each element in an input ndarray.\n*\n* @module @stdlib/math-tools-unary\n*\n* @example\n* var base = require( '@stdlib/math-base-special-abs' );\n* var dispatch = require( '@stdlib/ndarray-dispatch' );\n* var unary = require( '@stdlib/ndarray-base-unary' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var array = require( '@stdlib/ndarray-array' );\n* var factory = require( '@stdlib/math-tools-unary' );\n*\n* var types = [\n*     'float64', 'float64',\n*     'float32', 'float32',\n*     'generic', 'generic'\n* ];\n* var data = [\n*     base,\n*     base,\n*     base\n* ];\n* var dispatcher = dispatch( unary, types, data, 2, 1, 1 );\n*\n* var idt = [ 'float64', 'float32', 'generic' ];\n* var odt = idt;\n*\n* var policies = {\n*     'output': 'real_and_generic',\n*     'casting': 'none'\n* };\n* var abs = factory( dispatcher, [ idt ], odt, policies );\n*\n* var x = array( [ [ -1.0, -2.0 ], [ -3.0, -4.0 ] ] );\n* // returns <ndarray>\n*\n* var y = abs( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*/\n\n// MAIN //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isPlainObject", "hasOwnProp", "isOrder", "contains", "orders", "join", "format", "validate", "opts", "dtypes", "options", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isndarrayLike", "isFunction", "isObject", "isCollection", "isOutputDataTypePolicy", "isInputCastingPolicy", "isDataType", "contains", "unaryOutputDataType", "unaryInputCastingDataType", "baseAssign", "baseEmpty", "maybeBroadcastArray", "getShape", "getOrder", "getDType", "empty", "everyBy", "join", "format", "validate", "factory", "fcn", "idtypes", "odtypes", "policies", "POLICIES", "dt", "i", "unary", "assign", "x", "opts", "err", "xsh", "ord", "xdt", "ydt", "tmp", "y", "main"]
}
