{"version":3,"file":"index.mjs","sources":["../lib/resolve_output_dtype.js","../lib/validate_options.js","../lib/validate.js","../lib/main.js","../lib/validate_table.js","../lib/ndarray.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Resolves an output array data type.\n*\n* @private\n* @param {string} xdtype - input array data type\n* @param {string} policy - policy determining an output array data type\n* @throws {Error} unsupported policy\n* @returns {string} output array data type\n*/\nfunction resolve( xdtype, policy ) {\n\tswitch ( policy ) {\n\tcase 'same':\n\t\treturn xdtype;\n\tcase 'floating-point':\n\t\t// TODO: we may want to delegate checking for a floating-point dtype to a utility function/package (e.g., isFloatDtype), in order to centralize logic for testing whether a dtype is \"floating-point\". Otherwise, this will be yet another place to update logic should we ever add, e.g., a `float128` or `float16` dtype.\n\t\tif (\n\t\t\txdtype === 'float64' ||\n\t\t\txdtype === 'float32' ||\n\t\t\txdtype === 'generic' ||\n\t\t\txdtype === 'complex128' ||\n\t\t\txdtype === 'complex64'\n\t\t) {\n\t\t\treturn xdtype;\n\t\t}\n\t\treturn 'float64'; // TODO: constants/math/default-real-floating-point-dtype?\n\tcase 'real floating-point':\n\t\tif (\n\t\t\txdtype === 'float64' ||\n\t\t\txdtype === 'float32' ||\n\t\t\txdtype === 'generic'\n\t\t) {\n\t\t\treturn xdtype;\n\t\t}\n\t\treturn 'float64';\n\tcase 'complex floating-point':\n\t\tif (\n\t\t\txdtype === 'complex128' ||\n\t\t\txdtype === 'complex64'\n\t\t) {\n\t\t\treturn xdtype;\n\t\t}\n\t\treturn 'complex128'; // TODO: constants/math/default-complex-floating-point-dtype?\n\tdefault:\n\t\tthrow new Error( format( '0gz4W', policy ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport POLICIES from './policies.json';\n\n\n// VARIABLES //\n\nvar isPolicy = contains( POLICIES );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Object} options - options\n* @param {string} [options.output_dtype_policy] - policy for determining the output array data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'output_dtype_policy': 'float'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( '0gz2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'output_dtype_policy' ) ) {\n\t\topts.policy = options.output_dtype_policy;\n\t\tif ( !isPolicy( opts.policy ) ) {\n\t\t\treturn new TypeError( format( '0gz4Y', 'output_dtype_policy', opts.policy ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport orders from '@stdlib/ndarray-orders';\nimport dtypes from '@stdlib/ndarray-dtypes';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar isOrder = contains( orders() );\nvar isDType = contains( dtypes() );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Object} options - options\n* @param {string} [options.dtype] - output array data type\n* @param {string} [options.order] - output array order\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'order': 'row-major'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( '0gz2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !isDType( opts.dtype ) ) {\n\t\t\treturn new TypeError( format( '0gz4X', 'dtype', opts.dtype ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t\tif ( !isOrder( opts.order ) ) {\n\t\t\treturn new TypeError( format( '0gz4X', 'order', opts.order ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isCollection from '@stdlib/assert-is-collection';\nimport dtype from '@stdlib/ndarray-base-buffer-dtype';\nimport buffer from '@stdlib/ndarray-base-buffer';\nimport broadcast from '@stdlib/ndarray-base-broadcast-array';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport ndarrayfcn from './ndarray.js';\nimport odtype from './resolve_output_dtype.js';\nimport defaults from './defaults.json';\nimport validateTable from './validate_table.js';\nimport validateOptions from './validate_options.js';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns a function which dispatches to specified functions based on input argument types.\n*\n* @param {Object} table - resolution table object\n* @param {(Function|null)} [table.number] - function to invoke upon receiving a number\n* @param {(Function|null)} [table.complex] - function to invoke upon receiving a complex number\n* @param {(Function|null)} [table.array] - function to invoke upon receiving an array-like object\n* @param {(Function|null)} [table.ndarray] - function to invoke upon receiving an ndarray-like object\n* @param {Options} [options] - options\n* @param {string} [options.output_dtype_policy='floating-point'] - policy for determining the output array data type\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} first argument must have valid table fields\n* @throws {Error} each table field value must be either a function or `null`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} dispatch function\n*\n* @example\n* import base from '@stdlib/math-base-special-abs';\n* import strided from '@stdlib/math-strided-special-abs';\n* import dispatcher from '@stdlib/ndarray-dispatch';\n* import unary from '@stdlib/ndarray-base-unary';\n* import Float64Array from '@stdlib/array-float64';\n*\n* var types = [\n*     'float64', 'float64',\n*     'float32', 'float32',\n*     'generic', 'generic'\n* ];\n* var data = [\n*     base,\n*     base,\n*     base\n* ];\n* var nd = dispatcher( unary, types, data, 2, 1, 1 );\n*\n* var table = {\n*     'number': base,\n*     'complex': null,\n*     'array': strided,\n*     'ndarray': nd\n* };\n*\n* var abs = dispatch( table, {\n*     'output_dtype_policy': 'same'\n* });\n*\n* var x = new Float64Array( [ -1.0, -2.0, -3.0 ] );\n*\n* var y = abs( x );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction dispatch( table, options ) {\n\tvar OPTS;\n\tvar err;\n\tvar fcn;\n\tvar t;\n\n\tt = {\n\t\t'number': null,\n\t\t'complex': null,\n\t\t'array': null,\n\t\t'ndarray': null\n\t};\n\terr = validateTable( t, table );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tOPTS = {\n\t\t'policy': defaults.output_dtype_policy\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validateOptions( OPTS, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tfcn = dispatcher;\n\tsetReadOnly( fcn, 'assign', assign );\n\treturn fcn;\n\n\t/**\n\t* Function interface which performs dispatch.\n\t*\n\t* @private\n\t* @param {(ndarray|Collection|number|Complex)} x - input value\n\t* @param {Options} [options] - options\n\t* @param {string} [options.dtype] - output array data type\n\t* @param {string} [options.order] - output array order (row-major or column-major)\n\t* @throws {TypeError} first argument must be a supported data type\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {(ndarray|Collection|number|Complex)} results\n\t*/\n\tfunction dispatcher( x ) {\n\t\tvar xdtype;\n\t\tvar ydtype;\n\t\tvar opts;\n\t\tvar err;\n\t\tvar y;\n\t\tif ( isNumber( x ) ) {\n\t\t\tif ( t.number ) {\n\t\t\t\treturn t.number( x );\n\t\t\t}\n\t\t\tthrow new TypeError( format('0gz0O') );\n\t\t}\n\t\tif ( isComplexLike( x ) ) {\n\t\t\tif ( t.complex ) {\n\t\t\t\treturn t.complex( x );\n\t\t\t}\n\t\t\tthrow new TypeError( format('0gz0P') );\n\t\t}\n\t\topts = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( opts, arguments[ 1 ] );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tif ( isndarrayLike( x ) ) {\n\t\t\tif ( t.ndarray === null ) {\n\t\t\t\tthrow new TypeError( format('0gz0Q') );\n\t\t\t}\n\t\t\tydtype = opts.dtype || odtype( x.dtype, OPTS.policy );\n\t\t\treturn ndarrayfcn( t.ndarray, x, ydtype, opts.order || x.order );\n\t\t}\n\t\tif ( isCollection( x ) ) {\n\t\t\tif ( t.array === null ) {\n\t\t\t\tthrow new TypeError( format('0gz0R') );\n\t\t\t}\n\t\t\txdtype = dtype( x ) || 'generic';\n\t\t\tydtype = opts.dtype || odtype( xdtype, OPTS.policy );\n\t\t\ty = buffer( ydtype, x.length );\n\t\t\tt.array( x.length, xdtype, x, 1, ydtype, y, 1 );\n\t\t\treturn y;\n\t\t}\n\t\tthrow new TypeError( format( '0gz4V', x ) );\n\t}\n\n\t/**\n\t* Function interface which performs dispatch and assigns results to a provided output array.\n\t*\n\t* @private\n\t* @param {(ndarray|Collection)} x - input array\n\t* @param {(ndarray|Collection)} y - output array\n\t* @throws {TypeError} first argument must be a supported data type\n\t* @throws {TypeError} second argument must be a supported data type\n\t* @throws {TypeError} first and second argument must be the same \"kind\" (i.e., either both ndarrays or both collections)\n\t* @throws {RangeError} output array must have sufficient elements\n\t* @throws {Error} unable to broadcast the input array against the output array\n\t* @returns {(ndarray|Collection)} output array\n\t*/\n\tfunction assign( x, y ) {\n\t\tvar xsh;\n\t\tvar ysh;\n\t\tvar i;\n\t\tif ( isndarrayLike( x ) ) {\n\t\t\tif ( isndarrayLike( y ) ) {\n\t\t\t\txsh = x.shape;\n\t\t\t\tysh = y.shape;\n\n\t\t\t\t// Check whether we need to broadcast `x`...\n\t\t\t\tif ( xsh.length === ysh.length ) {\n\t\t\t\t\tfor ( i = 0; i < xsh.length; i++ ) {\n\t\t\t\t\t\t// Check whether dimensions match...\n\t\t\t\t\t\tif ( xsh[ i ] !== ysh[ i ] ) {\n\t\t\t\t\t\t\t// We found a mismatched dimension; delegate to `broadcast` to ensure that `x` is broadcast compatible with the output array shape...\n\t\t\t\t\t\t\tx = broadcast( x, ysh );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// If we are provided arrays with different ranks (i.e., number of dimensions), assume we need to broadcast, delegating to `broadcast` to ensure that `x` is broadcast compatible with the output array shape...\n\t\t\t\t\tx = broadcast( x, ysh );\n\t\t\t\t}\n\t\t\t\tt.ndarray( x, y );\n\t\t\t\treturn y;\n\t\t\t}\n\t\t\tthrow new TypeError( format('0gz0S') );\n\t\t}\n\t\tif ( isCollection( x ) ) {\n\t\t\tif ( isCollection( y ) ) {\n\t\t\t\tif ( y.length !== x.length ) {\n\t\t\t\t\tthrow new RangeError( format('0gz0T') );\n\t\t\t\t}\n\t\t\t\tt.array( x.length, dtype( x ) || 'generic', x, 1, dtype( y ) || 'generic', y, 1 );\n\t\t\t\treturn y;\n\t\t\t}\n\t\t\tthrow new TypeError( format('0gz0U') );\n\t\t}\n\t\tif ( isNumber( x ) ) {\n\t\t\tthrow new TypeError( format('0gz0V') );\n\t\t}\n\t\tif ( isComplexLike( x ) ) {\n\t\t\tthrow new TypeError( format('0gz0W') );\n\t\t}\n\t\tthrow new TypeError( format( '0gz4V', x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dispatch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isFunction from '@stdlib/assert-is-function';\nimport isNull from '@stdlib/assert-is-null';\nimport objectKeys from '@stdlib/utils-keys';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates a resolution table object.\n*\n* @private\n* @param {Object} out - destination object\n* @param {Object} table - resolution table object\n* @param {(Function|null)} [table.number] - function to invoke upon receiving a number\n* @param {(Function|null)} [table.complex] - function to invoke upon receiving a complex number\n* @param {(Function|null)} [table.array] - function to invoke upon receiving an array-like object\n* @param {(Function|null)} [table.ndarray] - function to invoke upon receiving an ndarray-like object\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var out = {};\n* var table = {\n*     'number': null,\n*     'complex': null,\n*     'array': null,\n*     'ndarray': null\n* };\n* var err = validate( out, table );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( out, table ) {\n\tvar fields;\n\tvar tmp;\n\tvar key;\n\tvar i;\n\n\tif ( !isPlainObject( table ) ) {\n\t\treturn new TypeError( format( '0gz4Z', table ) );\n\t}\n\tfields = objectKeys( out );\n\tfor ( i = 0; i < fields.length; i++ ) {\n\t\tkey = fields[ i ];\n\t\tif ( hasOwnProp( table, key ) ) {\n\t\t\ttmp = table[ key ];\n\t\t\tif ( !isFunction( tmp ) && !isNull( tmp ) ) {\n\t\t\t\treturn new TypeError( format( '0gz4a', key, tmp ) );\n\t\t\t}\n\t\t\tout[ key ] = tmp;\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ndarray from '@stdlib/ndarray-ctor';\nimport buffer from '@stdlib/ndarray-base-buffer';\nimport shape2strides from '@stdlib/ndarray-base-shape2strides';\nimport numel from '@stdlib/ndarray-base-numel';\nimport copy from '@stdlib/array-base-copy-indexed';\n\n\n// MAIN //\n\n/**\n* Applies a function to an ndarray.\n*\n* @private\n* @param {Function} fcn - function to apply\n* @param {ndarray} x - input array\n* @param {string} ydtype - output array data type\n* @param {string} yorder - output array order\n* @returns {ndarray} output array\n*/\nfunction ndarrayfcn( fcn, x, ydtype, yorder ) {\n\tvar shape;\n\tvar buf;\n\tvar y;\n\n\t// Check if we were provided a zero-dimensional array...\n\tshape = copy( x.shape ); // Note: we need to copy the shape to avoid a shared shape object between `x` and `y` which could lead to unintended mutations (e.g., if either `x` or `y` is reshaped)\n\tif ( shape.length === 0 ) {\n\t\tbuf = buffer( ydtype, 1 );\n\t\ty = ndarray( ydtype, buf, [], [ 0 ], 0, yorder );\n\t} else {\n\t\tbuf = buffer( ydtype, x.length || numel( shape ) ); // WARNING: `x.length` is a property found on ndarray instances, but not strictly necessary to describe an ndarray; accordingly, used here to avoid unnecessary computation, but a potential source of bugs if provided an ndarray-like object having a `length` property which is not equal to the product of the dimensions.\n\t\ty = ndarray( ydtype, buf, shape, shape2strides( shape, yorder ), 0, yorder ); // eslint-disable-line max-len\n\t}\n\tfcn( x, y );\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default ndarrayfcn;\n"],"names":["resolve","xdtype","policy","Error","format","isPolicy","contains","isOrder","orders","isDType","dtypes","dispatch","table","options","OPTS","err","fcn","t","out","fields","tmp","key","i","isPlainObject","TypeError","objectKeys","length","hasOwnProp","isFunction","isNull","validateTable","number","complex","array","ndarray","defaults","arguments","opts","output_dtype_policy","validateOptions","x","ydtype","y","isNumber","isComplexLike","dtype","order","validate","isndarrayLike","odtype","yorder","shape","buf","copy","buffer","numel","shape2strides","ndarrayfcn","isCollection","setReadOnly","xsh","ysh","broadcast","RangeError"],"mappings":"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"}