{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/resolve_output_dtype.js","../lib/validate_table.js","../lib/validate_options.js","../lib/validate.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ndarray from '@stdlib/ndarray-ctor' ;\nimport buffer from '@stdlib/ndarray-base-buffer' ;\nimport shape2strides from '@stdlib/ndarray-base-shape2strides' ;\nimport numel from '@stdlib/ndarray-base-numel' ;\n\n\n// FUNCTIONS //\n\n/**\n* Copies an array-like object to a generic array.\n*\n* @private\n* @param {ArrayLikeObject} x - input array\n* @returns {Array} output array\n*/\nfunction copy( x ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tout.push( x[ i ] );\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Applies a function to an ndarray.\n*\n* @private\n* @param {Function} fcn - function to apply\n* @param {ndarray} x - input array\n* @param {string} ydtype - output array data type\n* @param {string} yorder - output array order\n* @throws {TypeError} must provide an input array argument with a supported data type\n* @returns {ndarray} output array\n*/\nfunction ndarrayfcn( fcn, x, ydtype, yorder ) {\n\tvar shape;\n\tvar buf;\n\tvar y;\n\n\t// Check if we were provided a zero-dimensional array...\n\tshape = copy( x.shape ); // Note: we need to copy the shape to avoid a shared shape object between `x` and `y` which could lead to unintended mutations (e.g., if either `x` or `y` is reshaped)\n\tif ( shape.length === 0 ) {\n\t\tbuf = buffer( ydtype, 1 );\n\t\ty = ndarray( ydtype, buf, [], [ 0 ], 0, yorder );\n\t} else {\n\t\tbuf = buffer( ydtype, x.length || numel( shape ) ); // WARNING: `x.length` is a property found on ndarray instances, but not strictly necessary to describe an ndarray; accordingly, used here to avoid unnecessary computation, but a potential source of bugs if provided an ndarray-like object having a `length` property which is not equal to the product of the dimensions.\n\t\ty = ndarray( ydtype, buf, shape, shape2strides( shape, yorder ), 0, yorder ); // eslint-disable-line max-len\n\t}\n\tfcn( x, y );\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default ndarrayfcn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Resolves an output array data type.\n*\n* @private\n* @param {string} xdtype - input array data type\n* @param {string} policy - policy determining an output array data type\n* @throws {Error} unsupported policy\n* @returns {string} output array data type\n*/\nfunction resolve( xdtype, policy ) {\n\tswitch ( policy ) {\n\tcase 'same':\n\t\treturn xdtype;\n\tcase 'float':\n\t\tif (\n\t\t\txdtype === 'float64' ||\n\t\t\txdtype === 'float32' ||\n\t\t\txdtype === 'generic'\n\t\t) {\n\t\t\treturn xdtype;\n\t\t}\n\t\treturn 'float64';\n\tdefault:\n\t\tthrow new Error( format( '0LP4i', policy ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport isNull from '@stdlib/assert-is-null' ;\nimport objectKeys from '@stdlib/utils-keys' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Validates a resolution table object.\n*\n* @private\n* @param {Object} out - destination object\n* @param {Object} table - resolution table object\n* @param {(Function|null)} [table.number] - function to invoke upon receiving a number\n* @param {(Function|null)} [table.complex] - function to invoke upon receiving a complex number\n* @param {(Function|null)} [table.array] - function to invoke upon receiving an array-like object\n* @param {(Function|null)} [table.ndarray] - function to invoke upon receiving an ndarray-like object\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var out = {};\n* var table = {\n*     'number': null,\n*     'complex': null,\n*     'array': null,\n*     'ndarray': null\n* };\n* var err = validate( out, table );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( out, table ) {\n\tvar fields;\n\tvar tmp;\n\tvar key;\n\tvar i;\n\n\tif ( !isPlainObject( table ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Resolution table must be an object. Value: `%s`.', table ) );\n\t}\n\tfields = objectKeys( out );\n\tfor ( i = 0; i < fields.length; i++ ) {\n\t\tkey = fields[ i ];\n\t\tif ( hasOwnProp( table, key ) ) {\n\t\t\ttmp = table[ key ];\n\t\t\tif ( !isFunction( tmp ) && !isNull( tmp ) ) {\n\t\t\t\treturn new TypeError( format( 'invalid argument. Resolution table `%s` field value must be either a function or null. Value: `%s`.', key, tmp ) );\n\t\t\t}\n\t\t\tout[ key ] = tmp;\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport contains from '@stdlib/assert-contains' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport POLICIES from './policies.json' ;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Object} options - options\n* @param {string} [options.output_dtype_policy] - policy for determining the output array data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'output_dtype_policy': 'float'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( '0LP2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'output_dtype_policy' ) ) {\n\t\topts.policy = options.output_dtype_policy;\n\t\tif ( !contains( POLICIES, opts.policy ) ) {\n\t\t\treturn new TypeError( format( '0LP4l', 'output_dtype_policy', opts.policy ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport contains from '@stdlib/assert-contains' ;\nimport orders from '@stdlib/ndarray-orders' ;\nimport dtypes from '@stdlib/ndarray-dtypes' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// VARIABLES //\n\nvar ORDERS = orders();\nvar DTYPES = dtypes();\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Object} options - options\n* @param {string} [options.dtype] - output array data type\n* @param {string} [options.order] - output array order\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'order': 'row-major'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( '0LP2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( DTYPES, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( '0LP4k', 'dtype', opts.dtype ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t\tif ( !contains( ORDERS, opts.order ) ) {\n\t\t\treturn new TypeError( format( '0LP4k', 'order', opts.order ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number' ;\nimport isComplexLike from '@stdlib/assert-is-complex-like' ;\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like' ;\nimport isCollection from '@stdlib/assert-is-collection' ;\nimport dtype from '@stdlib/ndarray-base-buffer-dtype' ;\nimport buffer from '@stdlib/ndarray-base-buffer' ;\nimport broadcast from '@stdlib/ndarray-base-broadcast-array' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport ndarrayfcn from './ndarray.js' ;\nimport odtype from './resolve_output_dtype.js' ;\nimport defaults from './defaults.json' ;\nimport validateTable from './validate_table.js' ;\nimport validateOptions from './validate_options.js' ;\nimport validate from './validate.js' ;\n\n\n// MAIN //\n\n/**\n* Returns a function which dispatches to specified functions based on input argument types.\n*\n* @param {Object} table - resolution table object\n* @param {(Function|null)} [table.number] - function to invoke upon receiving a number\n* @param {(Function|null)} [table.complex] - function to invoke upon receiving a complex number\n* @param {(Function|null)} [table.array] - function to invoke upon receiving an array-like object\n* @param {(Function|null)} [table.ndarray] - function to invoke upon receiving an ndarray-like object\n* @param {Options} [options] - options\n* @param {string} [options.output_dtype_policy='float'] - policy for determining the output array data type\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} first argument must have valid table fields\n* @throws {Error} each table field value must be either a function or `null`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} dispatch function\n*\n* @example\n* import base from '@stdlib/math-base-special-abs' ;\n* import strided from '@stdlib/math-strided-special-abs' ;\n* import dispatcher from '@stdlib/ndarray-dispatch' ;\n* import unary from '@stdlib/ndarray-base-unary' ;\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var types = [\n*     'float64', 'float64',\n*     'float32', 'float32',\n*     'generic', 'generic'\n* ];\n* var data = [\n*     base,\n*     base,\n*     base\n* ];\n* var nd = dispatcher( unary, types, data, 2, 1, 1 );\n*\n* var table = {\n*     'number': base,\n*     'complex': null,\n*     'array': strided,\n*     'ndarray': nd\n* };\n*\n* var abs = dispatch( table, {\n*     'output_dtype_policy': 'same'\n* });\n*\n* var x = new Float64Array( [ -1.0, -2.0, -3.0 ] );\n*\n* var y = abs( x );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction dispatch( table, options ) {\n\tvar OPTS;\n\tvar err;\n\tvar fcn;\n\tvar t;\n\n\tt = {\n\t\t'number': null,\n\t\t'complex': null,\n\t\t'array': null,\n\t\t'ndarray': null\n\t};\n\terr = validateTable( t, table );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tOPTS = {\n\t\t'policy': defaults.output_dtype_policy\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validateOptions( OPTS, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tfcn = dispatcher;\n\tsetReadOnly( fcn, 'assign', assign );\n\treturn fcn;\n\n\t/**\n\t* Function interface which performs dispatch.\n\t*\n\t* @private\n\t* @param {(ndarray|Collection|number|Complex)} x - input value\n\t* @param {Options} [options] - options\n\t* @param {string} [options.dtype] - output array data type\n\t* @param {string} [options.order] - output array order (row-major or column-major)\n\t* @throws {TypeError} first argument must be a supported data type\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {(ndarray|Collection|number|Complex)} results\n\t*/\n\tfunction dispatcher( x, options ) {\n\t\tvar xdtype;\n\t\tvar ydtype;\n\t\tvar opts;\n\t\tvar err;\n\t\tvar y;\n\t\tif ( isNumber( x ) ) {\n\t\t\tif ( t.number ) {\n\t\t\t\treturn t.number( x );\n\t\t\t}\n\t\t\tthrow new TypeError( format( '0LP0O' ) );\n\t\t}\n\t\tif ( isComplexLike( x ) ) {\n\t\t\tif ( t.complex ) {\n\t\t\t\treturn t.complex( x );\n\t\t\t}\n\t\t\tthrow new TypeError( format( '0LP0P' ) );\n\t\t}\n\t\topts = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( opts, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tif ( isndarrayLike( x ) ) {\n\t\t\tif ( t.ndarray === null ) {\n\t\t\t\tthrow new TypeError( format( '0LP0Q' ) );\n\t\t\t}\n\t\t\tydtype = opts.dtype || odtype( x.dtype, OPTS.policy );\n\t\t\treturn ndarrayfcn( t.ndarray, x, ydtype, opts.order || x.order );\n\t\t}\n\t\tif ( isCollection( x ) ) {\n\t\t\tif ( t.array === null ) {\n\t\t\t\tthrow new TypeError( format( '0LP0R' ) );\n\t\t\t}\n\t\t\txdtype = dtype( x ) || 'generic';\n\t\t\tydtype = opts.dtype || odtype( xdtype, OPTS.policy );\n\t\t\ty = buffer( ydtype, x.length );\n\n\t\t\t// FIXME: need to supply dtype enum argument for each array argument...\n\t\t\tt.array( x.length, x, 1, y, 1 );\n\t\t\treturn y;\n\t\t}\n\t\tthrow new TypeError( format( '0LP4h', x ) );\n\t}\n\n\t/**\n\t* Function interface which performs dispatch and assigns results to a provided output array.\n\t*\n\t* @private\n\t* @param {(ndarray|Collection)} x - input array\n\t* @param {(ndarray|Collection)} y - output array\n\t* @throws {TypeError} first argument must be a supported data type\n\t* @throws {TypeError} second argument must be a supported data type\n\t* @throws {TypeError} first and second argument must be the same \"kind\" (i.e., either both ndarrays or both collections)\n\t* @throws {RangeError} output array must have sufficient elements\n\t* @throws {Error} unable to broadcast the input array against the output array\n\t* @returns {(ndarray|Collection)} output array\n\t*/\n\tfunction assign( x, y ) {\n\t\tvar xsh;\n\t\tvar ysh;\n\t\tvar i;\n\t\tif ( isndarrayLike( x ) ) {\n\t\t\tif ( isndarrayLike( y ) ) {\n\t\t\t\txsh = x.shape;\n\t\t\t\tysh = y.shape;\n\n\t\t\t\t// Check whether we need to broadcast `x`...\n\t\t\t\tif ( xsh.length === ysh.length ) {\n\t\t\t\t\tfor ( i = 0; i < xsh.length; i++ ) {\n\t\t\t\t\t\t// Check whether dimensions match...\n\t\t\t\t\t\tif ( xsh[ i ] !== ysh[ i ] ) {\n\t\t\t\t\t\t\t// We found a mismatched dimension; delegate to `broadcast` to ensure that `x` is broadcast compatible with the output array shape...\n\t\t\t\t\t\t\tx = broadcast( x, ysh );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// If we are provided arrays with different ranks (i.e., number of dimensions), assume we need to broadcast, delegating to `broadcast` to ensure that `x` is broadcast compatible with the output array shape...\n\t\t\t\t\tx = broadcast( x, ysh );\n\t\t\t\t}\n\t\t\t\tt.ndarray( x, y );\n\t\t\t\treturn y;\n\t\t\t}\n\t\t\tthrow new TypeError( format( '0LP0S' ) );\n\t\t}\n\t\tif ( isCollection( x ) ) {\n\t\t\tif ( isCollection( y ) ) {\n\t\t\t\tif ( y.length !== x.length ) {\n\t\t\t\t\tthrow new RangeError( format( '0LP0T' ) );\n\t\t\t\t}\n\t\t\t\t// FIXME: need to supply dtype enum argument for each array argument...\n\t\t\t\tt.array( x.length, x, 1, y, 1 );\n\t\t\t\treturn y;\n\t\t\t}\n\t\t\tthrow new TypeError( format( '0LP0U' ) );\n\t\t}\n\t\tif ( isNumber( x ) ) {\n\t\t\tthrow new TypeError( format( '0LP0V' ) );\n\t\t}\n\t\tif ( isComplexLike( x ) ) {\n\t\t\tthrow new TypeError( format( '0LP0W' ) );\n\t\t}\n\t\tthrow new TypeError( format( '0LP4h', x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dispatch;\n"],"names":["ndarrayfcn","fcn","x","ydtype","yorder","shape","buf","y","out","i","length","push","copy","buffer","ndarray","numel","shape2strides","resolve","xdtype","policy","Error","format","validate","table","fields","tmp","key","isPlainObject","TypeError","objectKeys","hasOwnProp","isFunction","isNull","opts","options","output_dtype_policy","contains","POLICIES","ORDERS","orders","DTYPES","dtypes","dtype","order","dispatch","OPTS","err","t","validateTable","number","complex","array","defaults","arguments","validateOptions","setReadOnly","dispatcher","assign","isNumber","isComplexLike","isndarrayLike","odtype","isCollection","xsh","ysh","broadcast","RangeError"],"mappings":"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"}