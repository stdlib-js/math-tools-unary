{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/validate.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport isObject from '@stdlib/assert-is-object';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isOutputDataTypePolicy from '@stdlib/ndarray-base-assert-is-output-data-type-policy';\nimport isInputCastingPolicy from '@stdlib/ndarray-base-assert-is-input-casting-policy';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport contains from '@stdlib/array-base-assert-contains';\nimport unaryOutputDataType from '@stdlib/ndarray-base-unary-output-dtype';\nimport unaryInputCastingDataType from '@stdlib/ndarray-base-unary-input-casting-dtype';\nimport baseAssign from '@stdlib/ndarray-base-assign';\nimport baseEmpty from '@stdlib/ndarray-base-empty';\nimport maybeBroadcastArray from '@stdlib/ndarray-maybe-broadcast-array';\nimport getShape from '@stdlib/ndarray-shape';\nimport getOrder from '@stdlib/ndarray-order';\nimport getDType from '@stdlib/ndarray-dtype';\nimport empty from '@stdlib/ndarray-empty';\nimport everyBy from '@stdlib/array-base-every-by';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns a function which performs element-wise computation.\n*\n* @param {Function} fcn - function which applies a unary function to each element in an ndarray\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing lists of supported input data types for each ndarray argument\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - dispatch policies\n* @param {string} policies.output - output data type policy\n* @param {string} policies.casting - input ndarray casting policy\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be an object having supported policies\n* @returns {Function} function which performs element-wise computation\n*\n* @example\n* import base from '@stdlib/math-base-special-abs';\n* import dispatch from '@stdlib/ndarray-dispatch';\n* import unary from '@stdlib/ndarray-base-unary';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import array from '@stdlib/ndarray-array';\n*\n* var types = [\n*     'float64', 'float64',\n*     'float32', 'float32',\n*     'generic', 'generic'\n* ];\n* var data = [\n*     base,\n*     base,\n*     base\n* ];\n* var dispatcher = dispatch( unary, types, data, 2, 1, 1 );\n*\n* var idt = [ 'float64', 'float32', 'generic' ];\n* var odt = idt;\n*\n* var policies = {\n*     'output': 'real_and_generic',\n*     'casting': 'none'\n* };\n* var abs = factory( dispatcher, [ idt ], odt, policies );\n*\n* var x = array( [ [ -1.0, -2.0 ], [ -3.0, -4.0 ] ] );\n* // returns <ndarray>\n*\n* var y = abs( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( y );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*/\nfunction factory( fcn, idtypes, odtypes, policies ) {\n\tvar POLICIES;\n\tvar dt;\n\tvar i;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( '0gz3c', fcn ) );\n\t}\n\tif ( !isCollection( idtypes ) ) {\n\t\tthrow new TypeError( format( '0gz2y', idtypes ) );\n\t}\n\tfor ( i = 0; i < idtypes.length; i++ ) {\n\t\tdt = idtypes[ i ];\n\t\tif (\n\t\t\t!isCollection( dt ) ||\n\t\t\tdt.length < 1 ||\n\t\t\t!everyBy( dt, isDataType )\n\t\t) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must contain arrays of data types. Value: `%s`.', idtypes ) );\n\t\t}\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( '0gz43', policies ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\tif ( !isInputCastingPolicy( policies.casting ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported casting policy. Value: `%s`.', policies.casting ) );\n\t}\n\tPOLICIES = {\n\t\t'output': policies.output,\n\t\t'casting': policies.casting\n\t};\n\tsetReadOnly( unary, 'assign', assign );\n\treturn unary;\n\n\t/**\n\t* Performs element-wise computation.\n\t*\n\t* @private\n\t* @param {ndarray} x - input array\n\t* @param {Options} [options] - options\n\t* @param {*} [options.dtype] - output array data type\n\t* @param {string} [options.order] - output array order\n\t* @throws {TypeError} first argument must be an ndarray\n\t* @throws {TypeError} first argument must have a supported data type\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ndarray} output array\n\t*/\n\tfunction unary( x ) {\n\t\tvar opts;\n\t\tvar err;\n\t\tvar xsh;\n\t\tvar ord;\n\t\tvar xdt;\n\t\tvar ydt;\n\t\tvar tmp;\n\t\tvar dt;\n\t\tvar y;\n\n\t\tif ( !isndarrayLike( x ) ) {\n\t\t\tthrow new TypeError( format( '0gz4f', x ) );\n\t\t}\n\t\txdt = getDType( x );\n\t\tif ( !contains( idtypes[ 0 ], xdt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( idtypes[ 0 ], '\", \"' ), xdt ) );\n\t\t}\n\t\topts = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( opts, odtypes, arguments[ 1 ] );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\txsh = getShape( x );\n\t\tord = getOrder( x );\n\n\t\t// Initialize an output array:\n\t\tydt = opts.dtype || unaryOutputDataType( xdt, POLICIES.output );\n\t\ty = empty( xsh, {\n\t\t\t'dtype': ydt,\n\t\t\t'order': opts.order || ord\n\t\t});\n\n\t\t// Determine whether we need to cast the input ndarray...\n\t\tdt = unaryInputCastingDataType( xdt, ydt, POLICIES.casting );\n\t\tif ( xdt !== dt ) {\n\t\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\t\ttmp = baseEmpty( dt, xsh, ord );\n\t\t\tbaseAssign( [ x, tmp ] );\n\t\t\tx = tmp;\n\t\t}\n\t\tfcn( x, y );\n\t\treturn y;\n\t}\n\n\t/**\n\t* Performs element-wise computation and assigns results to a provided output ndarray.\n\t*\n\t* @private\n\t* @param {ndarray} x - input array\n\t* @param {ndarray} y - output array\n\t* @throws {TypeError} first argument must be an ndarray\n\t* @throws {TypeError} first argument must have a supported data type\n\t* @throws {TypeError} second argument must be an ndarray\n\t* @throws {Error} unable to broadcast the input array against the output array\n\t* @returns {ndarray} output array\n\t*/\n\tfunction assign( x, y ) {\n\t\tvar xdt;\n\t\tvar tmp;\n\t\tvar dt;\n\n\t\tif ( !isndarrayLike( x ) ) {\n\t\t\tthrow new TypeError( format( '0gz4f', x ) );\n\t\t}\n\t\tif ( !isndarrayLike( y ) ) {\n\t\t\tthrow new TypeError( format( '0gzF1', y ) );\n\t\t}\n\t\t// Validate the input ndarray data type in order to maintain similar behavior to above...\n\t\txdt = getDType( x );\n\t\tif ( !contains( idtypes[ 0 ], xdt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( idtypes[ 0 ], '\", \"' ), xdt ) );\n\t\t}\n\t\t// Determine whether we need to cast the input ndarray...\n\t\tdt = unaryInputCastingDataType( xdt, getDType( y ), POLICIES.casting );\n\t\tif ( xdt !== dt ) {\n\t\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\t\ttmp = baseEmpty( dt, getShape( x ), getOrder( x ) );\n\t\t\tbaseAssign( [ x, tmp ] );\n\t\t\tx = tmp;\n\t\t}\n\t\tfcn( maybeBroadcastArray( x, getShape( y ) ), y );\n\t\treturn y;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport contains from '@stdlib/array-base-assert-contains';\nimport orders from '@stdlib/ndarray-orders';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Array} dtypes - list of supported output data types\n* @param {Object} options - options\n* @param {*} [options.dtype] - output array data type\n* @param {string} [options.order] - output array order\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var opts = {};\n* var options = {\n*     'order': 'row-major'\n* };\n* var err = validate( opts, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, dtypes, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( '0gz2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, String( opts.dtype ) ) ) {\n\t\t\treturn new TypeError( format( '0gz4S', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t\tif ( !isOrder( opts.order ) ) {\n\t\t\treturn new TypeError( format( '0gz4S', 'order', join( orders(), '\", \"' ), opts.order ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n"],"names":["factory","fcn","idtypes","odtypes","policies","POLICIES","dt","i","isFunction","TypeError","format","isCollection","length","everyBy","isDataType","isObject","isOutputDataTypePolicy","output","isInputCastingPolicy","casting","setReadOnly","unary","x","y","xdt","tmp","isndarrayLike","getDType","contains","join","unaryInputCastingDataType","baseEmpty","getShape","getOrder","baseAssign","maybeBroadcastArray","opts","err","xsh","ord","ydt","arguments","dtypes","options","isPlainObject","hasOwnProp","dtype","String","order","isOrder","orders","validate","unaryOutputDataType","empty"],"mappings":"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"}