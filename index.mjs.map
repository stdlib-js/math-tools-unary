{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/resolve_output_dtype.js","../lib/validate_table.js","../lib/validate_options.js","../lib/validate.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ndarray = require( '@stdlib/ndarray-ctor' );\nvar buffer = require( '@stdlib/ndarray-base-buffer' );\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\n\n\n// FUNCTIONS //\n\n/**\n* Copies an array-like object to a generic array.\n*\n* @private\n* @param {ArrayLikeObject} x - input array\n* @returns {Array} output array\n*/\nfunction copy( x ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tout.push( x[ i ] );\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Applies a function to an ndarray.\n*\n* @private\n* @param {Function} fcn - function to apply\n* @param {ndarray} x - input array\n* @param {string} ydtype - output array data type\n* @param {string} yorder - output array order\n* @throws {TypeError} must provide an input array argument with a supported data type\n* @returns {ndarray} output array\n*/\nfunction ndarrayfcn( fcn, x, ydtype, yorder ) {\n\tvar shape;\n\tvar buf;\n\tvar y;\n\n\t// Check if we were provided a zero-dimensional array...\n\tshape = copy( x.shape ); // Note: we need to copy the shape to avoid a shared shape object between `x` and `y` which could lead to unintended mutations (e.g., if either `x` or `y` is reshaped)\n\tif ( shape.length === 0 ) {\n\t\tbuf = buffer( ydtype, 1 );\n\t\ty = ndarray( ydtype, buf, [], [ 0 ], 0, yorder );\n\t} else {\n\t\tbuf = buffer( ydtype, x.length || numel( shape ) ); // WARNING: `x.length` is a property found on ndarray instances, but not strictly necessary to describe an ndarray; accordingly, used here to avoid unnecessary computation, but a potential source of bugs if provided an ndarray-like object having a `length` property which is not equal to the product of the dimensions.\n\t\ty = ndarray( ydtype, buf, shape, shape2strides( shape, yorder ), 0, yorder ); // eslint-disable-line max-len\n\t}\n\tfcn( x, y );\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ndarrayfcn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Resolves an output array data type.\n*\n* @private\n* @param {string} xdtype - input array data type\n* @param {string} policy - policy determining an output array data type\n* @throws {Error} unsupported policy\n* @returns {string} output array data type\n*/\nfunction resolve( xdtype, policy ) {\n\tswitch ( policy ) {\n\tcase 'same':\n\t\treturn xdtype;\n\tcase 'float':\n\t\tif (\n\t\t\txdtype === 'float64' ||\n\t\t\txdtype === 'float32' ||\n\t\t\txdtype === 'generic'\n\t\t) {\n\t\t\treturn xdtype;\n\t\t}\n\t\treturn 'float64';\n\tdefault:\n\t\tthrow new Error( format( 'invalid option. Unsupported policy for determining an output array data type. Option: `%s`.', policy ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isNull = require( '@stdlib/assert-is-null' );\nvar objectKeys = require( '@stdlib/utils-keys' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates a resolution table object.\n*\n* @private\n* @param {Object} out - destination object\n* @param {Object} table - resolution table object\n* @param {(Function|null)} [table.number] - function to invoke upon receiving a number\n* @param {(Function|null)} [table.complex] - function to invoke upon receiving a complex number\n* @param {(Function|null)} [table.array] - function to invoke upon receiving an array-like object\n* @param {(Function|null)} [table.ndarray] - function to invoke upon receiving an ndarray-like object\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var out = {};\n* var table = {\n*     'number': null,\n*     'complex': null,\n*     'array': null,\n*     'ndarray': null\n* };\n* var err = validate( out, table );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( out, table ) {\n\tvar fields;\n\tvar tmp;\n\tvar key;\n\tvar i;\n\n\tif ( !isPlainObject( table ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Resolution table must be a plain object. Value: `%s`.', table ) );\n\t}\n\tfields = objectKeys( out );\n\tfor ( i = 0; i < fields.length; i++ ) {\n\t\tkey = fields[ i ];\n\t\tif ( hasOwnProp( table, key ) ) {\n\t\t\ttmp = table[ key ];\n\t\t\tif ( !isFunction( tmp ) && !isNull( tmp ) ) {\n\t\t\t\treturn new TypeError( format( 'invalid argument. Resolution table `%s` field value must be either a function or `null`. Value: `%s`.', key, tmp ) );\n\t\t\t}\n\t\t\tout[ key ] = tmp;\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar contains = require( '@stdlib/assert-contains' );\nvar format = require( '@stdlib/string-format' );\nvar POLICIES = require( './policies.json' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Object} options - options\n* @param {string} [options.output_dtype_policy] - policy for determining the output array data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'output_dtype_policy': 'float'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be a plain object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'output_dtype_policy' ) ) {\n\t\topts.policy = options.output_dtype_policy;\n\t\tif ( !contains( POLICIES, opts.policy ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a recognized/supported output array data type policy. Option: `%s`.', 'output_dtype_policy', opts.policy ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar contains = require( '@stdlib/assert-contains' );\nvar orders = require( '@stdlib/ndarray-orders' );\nvar dtypes = require( '@stdlib/ndarray-dtypes' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar ORDERS = orders();\nvar DTYPES = dtypes();\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Object} options - options\n* @param {string} [options.dtype] - output array data type\n* @param {string} [options.order] - output array order\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'order': 'row-major'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be a plain object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( DTYPES, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a recognized/supported data type. Option: `%s`.', 'dtype', opts.dtype ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t\tif ( !contains( ORDERS, opts.order ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a recognized/supported data type. Option: `%s`.', 'order', opts.order ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isComplexLike = require( '@stdlib/assert-is-complex-like' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar dtype = require( '@stdlib/ndarray-base-buffer-dtype' );\nvar buffer = require( '@stdlib/ndarray-base-buffer' );\nvar broadcast = require( '@stdlib/ndarray-base-broadcast-array' );\nvar format = require( '@stdlib/string-format' );\nvar ndarrayfcn = require( './ndarray.js' );\nvar odtype = require( './resolve_output_dtype.js' );\nvar defaults = require( './defaults.json' );\nvar validateTable = require( './validate_table.js' );\nvar validateOptions = require( './validate_options.js' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function which dispatches to specified functions based on input argument types.\n*\n* @param {Object} table - resolution table object\n* @param {(Function|null)} [table.number] - function to invoke upon receiving a number\n* @param {(Function|null)} [table.complex] - function to invoke upon receiving a complex number\n* @param {(Function|null)} [table.array] - function to invoke upon receiving an array-like object\n* @param {(Function|null)} [table.ndarray] - function to invoke upon receiving an ndarray-like object\n* @param {Options} [options] - options\n* @param {string} [options.output_dtype_policy='float'] - policy for determining the output array data type\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} first argument must have valid table fields\n* @throws {Error} each table field value must be either a function or `null`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} dispatch function\n*\n* @example\n* var base = require( '@stdlib/math-base-special-abs' );\n* var strided = require( '@stdlib/math-strided-special-abs' );\n* var dispatcher = require( '@stdlib/ndarray-dispatch' );\n* var unary = require( '@stdlib/ndarray-base-unary' );\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var types = [\n*     'float64', 'float64',\n*     'float32', 'float32',\n*     'generic', 'generic'\n* ];\n* var data = [\n*     base,\n*     base,\n*     base\n* ];\n* var nd = dispatcher( unary, types, data, 2, 1, 1 );\n*\n* var table = {\n*     'number': base,\n*     'complex': null,\n*     'array': strided,\n*     'ndarray': nd\n* };\n*\n* var abs = dispatch( table, {\n*     'output_dtype_policy': 'same'\n* });\n*\n* var x = new Float64Array( [ -1.0, -2.0, -3.0 ] );\n*\n* var y = abs( x );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction dispatch( table, options ) {\n\tvar OPTS;\n\tvar err;\n\tvar fcn;\n\tvar t;\n\n\tt = {\n\t\t'number': null,\n\t\t'complex': null,\n\t\t'array': null,\n\t\t'ndarray': null\n\t};\n\terr = validateTable( t, table );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tOPTS = {\n\t\t'policy': defaults.output_dtype_policy\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validateOptions( OPTS, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tfcn = dispatcher;\n\tsetReadOnly( fcn, 'assign', assign );\n\treturn fcn;\n\n\t/**\n\t* Function interface which performs dispatch.\n\t*\n\t* @private\n\t* @param {(ndarray|Collection|number|Complex)} x - input value\n\t* @param {Options} [options] - options\n\t* @param {string} [options.dtype] - output array data type\n\t* @param {string} [options.order] - output array order (row-major or column-major)\n\t* @throws {TypeError} first argument must be a supported data type\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {(ndarray|Collection|number|Complex)} results\n\t*/\n\tfunction dispatcher( x, options ) {\n\t\tvar xdtype;\n\t\tvar ydtype;\n\t\tvar opts;\n\t\tvar err;\n\t\tvar y;\n\t\tif ( isNumber( x ) ) {\n\t\t\tif ( t.number ) {\n\t\t\t\treturn t.number( x );\n\t\t\t}\n\t\t\tthrow new TypeError( 'invalid argument. Providing a number is not supported.' );\n\t\t}\n\t\tif ( isComplexLike( x ) ) {\n\t\t\tif ( t.complex ) {\n\t\t\t\treturn t.complex( x );\n\t\t\t}\n\t\t\tthrow new TypeError( 'invalid argument. Providing a complex number is not supported.' );\n\t\t}\n\t\topts = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( opts, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tif ( isndarrayLike( x ) ) {\n\t\t\tif ( t.ndarray === null ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Providing an ndarray is not supported.' );\n\t\t\t}\n\t\t\tydtype = opts.dtype || odtype( x.dtype, OPTS.policy );\n\t\t\treturn ndarrayfcn( t.ndarray, x, ydtype, opts.order || x.order );\n\t\t}\n\t\tif ( isCollection( x ) ) {\n\t\t\tif ( t.array === null ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Providing an array-like object is not supported.' );\n\t\t\t}\n\t\t\txdtype = dtype( x ) || 'generic';\n\t\t\tydtype = opts.dtype || odtype( xdtype, OPTS.policy );\n\t\t\ty = buffer( ydtype, x.length );\n\n\t\t\t// FIXME: need to supply dtype enum argument for each array argument...\n\t\t\tt.array( x.length, x, 1, y, 1 );\n\t\t\treturn y;\n\t\t}\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an argument having a supported data type. Value: `%s`.', x ) );\n\t}\n\n\t/**\n\t* Function interface which performs dispatch and assigns results to a provided output array.\n\t*\n\t* @private\n\t* @param {(ndarray|Collection)} x - input array\n\t* @param {(ndarray|Collection)} y - output array\n\t* @throws {TypeError} first argument must be a supported data type\n\t* @throws {TypeError} second argument must be a supported data type\n\t* @throws {TypeError} first and second argument must be the same \"kind\" (i.e., either both ndarrays or both collections)\n\t* @throws {RangeError} output array must have sufficient elements\n\t* @throws {Error} unable to broadcast the input array against the output array\n\t* @returns {(ndarray|Collection)} output array\n\t*/\n\tfunction assign( x, y ) {\n\t\tvar xsh;\n\t\tvar ysh;\n\t\tvar i;\n\t\tif ( isndarrayLike( x ) ) {\n\t\t\tif ( isndarrayLike( y ) ) {\n\t\t\t\txsh = x.shape;\n\t\t\t\tysh = y.shape;\n\n\t\t\t\t// Check whether we need to broadcast `x`...\n\t\t\t\tif ( xsh.length === ysh.length ) {\n\t\t\t\t\tfor ( i = 0; i < xsh.length; i++ ) {\n\t\t\t\t\t\t// Check whether dimensions match...\n\t\t\t\t\t\tif ( xsh[ i ] !== ysh[ i ] ) {\n\t\t\t\t\t\t\t// We found a mismatched dimension; delegate to `broadcast` to ensure that `x` is broadcast compatible with the output array shape...\n\t\t\t\t\t\t\tx = broadcast( x, ysh );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// If we are provided arrays with different ranks (i.e., number of dimensions), assume we need to broadcast, delegating to `broadcast` to ensure that `x` is broadcast compatible with the output array shape...\n\t\t\t\t\tx = broadcast( x, ysh );\n\t\t\t\t}\n\t\t\t\tt.ndarray( x, y );\n\t\t\t\treturn y;\n\t\t\t}\n\t\t\tthrow new TypeError( 'invalid argument. If the first argument is an ndarray, the second argument must be an ndarray.' );\n\t\t}\n\t\tif ( isCollection( x ) ) {\n\t\t\tif ( isCollection( y ) ) {\n\t\t\t\tif ( y.length !== x.length ) {\n\t\t\t\t\tthrow new RangeError( 'invalid argument. Output array must have the same number of elements (i.e., length) as the input array.' );\n\t\t\t\t}\n\t\t\t\t// FIXME: need to supply dtype enum argument for each array argument...\n\t\t\t\tt.array( x.length, x, 1, y, 1 );\n\t\t\t\treturn y;\n\t\t\t}\n\t\t\tthrow new TypeError( 'invalid argument. If the first argument is an array-like object, the second argument must be an array-like object.' );\n\t\t}\n\t\tif ( isNumber( x ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Providing a number is not supported. Consider providing a zero-dimensional ndarray containing the numeric value.' );\n\t\t}\n\t\tif ( isComplexLike( x ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Providing a complex number is not supported. Consider providing a zero-dimensional ndarray containing the complex number value.' );\n\t\t}\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an argument having a supported data type. Value: `%s`.', x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = dispatch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a function which dispatches to specified functions based on input argument types.\n*\n* @module @stdlib/math-tools-unary\n*\n* @example\n* var base = require( '@stdlib/math-base-special-abs' );\n* var strided = require( '@stdlib/math-strided-special-abs' );\n* var dispatcher = require( '@stdlib/ndarray-dispatch' );\n* var unary = require( '@stdlib/ndarray-base-unary' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dispatch = require( '@stdlib/math-tools-unary' );\n*\n* var types = [\n*     'float64', 'float64',\n*     'float32', 'float32',\n*     'generic', 'generic'\n* ];\n* var data = [\n*     base,\n*     base,\n*     base\n* ];\n* var nd = dispatcher( unary, types, data, 2, 1, 1 );\n*\n* var table = {\n*     'number': base,\n*     'complex': null,\n*     'array': strided,\n*     'ndarray': nd\n* };\n*\n* var abs = dispatch( table );\n*\n* var x = new Float64Array( [ -1.0, -2.0, -3.0 ] );\n* var y = abs( x );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\n\n// MAIN //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],"names":["ndarray","require$$0","buffer","require$$1","shape2strides","require$$2","numel","require$$3","ndarray_1","fcn","x","ydtype","yorder","shape","buf","y","out","i","length","push","copy","format","resolve_output_dtype","xdtype","policy","Error","isPlainObject","hasOwnProp","isFunction","isNull","objectKeys","require$$4","require$$5","validate_table","table","fields","tmp","key","TypeError","contains","POLICIES","validate_options","opts","options","output_dtype_policy","dtypes","ORDERS","DTYPES","validate_1","dtype","order","setReadOnly","isNumber","isPrimitive","isComplexLike","isndarrayLike","isCollection","require$$6","broadcast","require$$7","require$$8","ndarrayfcn","require$$9","odtype","require$$10","defaults","require$$11","validateTable","require$$12","validateOptions","require$$13","validate","require$$14","lib","OPTS","err","t","number","complex","array","arguments","dispatcher","assign","xsh","ysh","RangeError"],"mappings":"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"}